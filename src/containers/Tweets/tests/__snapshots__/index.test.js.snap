// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SagaPage Expect component to render properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SagaPage
    getSagaTest={[Function]}
    sagaTest=""
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3>
          <FormattedMessage
                    defaultMessage="[Saga Example]"
                    id="sagaExample.title"
                    values={Object {}}
          />
</h3>,
        <p>
          <FormattedMessage
                    defaultMessage="[Test: {responseMessage}]"
                    id="sagaExample.response"
                    values={
                              Object {
                                        "responseMessage": "",
                                      }
                    }
          />
</p>,
        <button
          data-id="sagaTestButton"
          onClick={[Function]}
          type="button"
>
          <FormattedMessage
                    defaultMessage="[Test Saga]"
                    id="sagaExample.testButton"
                    values={Object {}}
          />
</button>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <FormattedMessage
            defaultMessage="[Saga Example]"
            id="sagaExample.title"
            values={Object {}}
/>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "defaultMessage": "[Saga Example]",
            "id": "sagaExample.title",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <FormattedMessage
            defaultMessage="[Test: {responseMessage}]"
            id="sagaExample.response"
            values={
                        Object {
                                    "responseMessage": "",
                                  }
            }
/>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "defaultMessage": "[Test: {responseMessage}]",
            "id": "sagaExample.response",
            "values": Object {
              "responseMessage": "",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <FormattedMessage
            defaultMessage="[Test Saga]"
            id="sagaExample.testButton"
            values={Object {}}
/>,
          "data-id": "sagaTestButton",
          "onClick": [Function],
          "type": "button",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "defaultMessage": "[Test Saga]",
            "id": "sagaExample.testButton",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "button",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3>
            <FormattedMessage
                        defaultMessage="[Saga Example]"
                        id="sagaExample.title"
                        values={Object {}}
            />
</h3>,
          <p>
            <FormattedMessage
                        defaultMessage="[Test: {responseMessage}]"
                        id="sagaExample.response"
                        values={
                                    Object {
                                                "responseMessage": "",
                                              }
                        }
            />
</p>,
          <button
            data-id="sagaTestButton"
            onClick={[Function]}
            type="button"
>
            <FormattedMessage
                        defaultMessage="[Test Saga]"
                        id="sagaExample.testButton"
                        values={Object {}}
            />
</button>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              defaultMessage="[Saga Example]"
              id="sagaExample.title"
              values={Object {}}
/>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultMessage": "[Saga Example]",
              "id": "sagaExample.title",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              defaultMessage="[Test: {responseMessage}]"
              id="sagaExample.response"
              values={
                            Object {
                                          "responseMessage": "",
                                        }
              }
/>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultMessage": "[Test: {responseMessage}]",
              "id": "sagaExample.response",
              "values": Object {
                "responseMessage": "",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              defaultMessage="[Test Saga]"
              id="sagaExample.testButton"
              values={Object {}}
/>,
            "data-id": "sagaTestButton",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultMessage": "[Test Saga]",
              "id": "sagaExample.testButton",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "button",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
